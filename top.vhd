LIBRARY ieee;
USE ieee.std_logic_1164.all;

--
-- Based upon Golden_top generated by Terasic System Builder
--
ENTITY top IS
	Port (
		-- CLOCK
		ADC_CLK_10 : in	std_logic;
		MAX10_CLK1_50 : in	std_logic;
		MAX10_CLK2_50 : in	std_logic;

		-- SDRAM
		DRAM_ADDR : out std_logic_vector(12 downto 0);
		DRAM_BA : out std_logic_vector(1 downto 0);
		DRAM_CAS_N : out std_logic;
		DRAM_CKE : out std_logic;
		DRAM_CLK : out std_logic;
		DRAM_CS_N : out std_logic;
		DRAM_DQ : in std_logic_vector(15 downto 0);
		DRAM_LDQM : out std_logic;
		DRAM_RAS_N : out std_logic;
		DRAM_UDQM : out std_logic;
		DRAM_WE_N : out std_logic;

		-- SEG7
		HEX0 : out std_logic_vector (7 downto 0);
		HEX1 : out std_logic_vector (7 downto 0);
		HEX2 : out std_logic_vector (7 downto 0);
		HEX3 : out std_logic_vector (7 downto 0);
		HEX4 : out std_logic_vector (7 downto 0);
		HEX5 : out std_logic_vector (7 downto 0);

		-- KEY
		KEY : in std_logic_vector (1 downto 0);

		-- LED
		LEDR 	: out std_logic_vector (9 downto 0);

		-- SW
		SW : in 	std_logic_vector (9 downto 0);

		-- VGA
		VGA_B :  out std_logic_vector (3 downto 0);
		VGA_G :  out std_logic_vector (3 downto 0);
		VGA_HS :  out std_logic;
		VGA_R :  out std_logic_vector (3 downto 0);
		VGA_VS : out std_logic;

		
		-- Accelerometer
		GSENSOR_CS_N : out std_logic;
		GSENSOR_INT : in std_logic_vector (2 downto 1);
		GSENSOR_SCLK : out std_logic; 
		GSENSOR_SDI : in std_logic;
		GSENSOR_SDO : in std_logic;

		-- Arduino
		ARDUINO_IO : in std_logic_vector (15 downto 0);
		ARDUINO_RESET_N : in std_logic;

		-- GPIO, GPIO connect to GPIO Default
		GPIO : in std_logic_vector(35 downto 0)
	);
END top;

ARCHITECTURE implementation OF top IS
	component clkpll is port (
			inclk0	: IN STD_LOGIC  := '0';
			c0			: OUT STD_LOGIC;
			locked	: OUT STD_LOGIC);
	end component;

	signal clkmaster : std_logic;
	signal locked_sig : std_logic;
	
BEGIN

	clkpll_inst : clkpll PORT MAP (
		inclk0	=> MAX10_CLK1_50,
		c0	 		=> clkmaster,
		locked	=> locked_sig
	);
	
	LEDR(0) <= clkmaster;
	LEDR(1) <= SW(0);
	LEDR(2) <= SW(1);
	LEDR(3) <= SW(2);
	
	

END implementation;

